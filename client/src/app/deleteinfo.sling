import jk.widget.common

class #widget:

ui VerticalBoxWidget
{
	CanvasWidget {
		color = Color.instance("#5d89e8")
	}
	
    spacing = context.getHeightValue("2000um")
    margin = context.getHeightValue("5mm")
    HorizontalBoxWidget {
        spacing = context.getHeightValue("100um")
        TextButtonWidget btnHome : 1.0 {
            text = "HOME"
            padding = context.getHeightValue("1000um")
            backgroundColor = Color.instance("#264651")
            clickHandler = func {
                onHomeClicked()
            }
        }
		TextButtonWidget btnSchedule : 1.0 {
            text = "ADD INSTRUCTOR"
            padding = context.getHeightValue("1000um")
            backgroundColor = Color.instance("#264651")
            clickHandler = func {
                onADDClicked()
            }
        }
		TextButtonWidget btnAboutUs : 1.0 {
            text = "RECORDS"
            padding = context.getHeightValue("1000um")
            backgroundColor = Color.instance("#264651")
            clickHandler = func {
                onrecordClicked()
            }
        }
		TextButtonWidget btnLogout : 1.0 {
            text = "LOGOUT"
            padding = context.getHeightValue("1000um")
            backgroundColor = Color.instance("#264651")
            clickHandler = func{
						var popup = new PopupDialogManager(context, this)
						popup.showConfirmDialog("Confirmation","Leave this Page?", func{
							onLogoutClicked()
						}, func{
							;
						})
			}
        }
    }
  VerticalScrollerWidget {
		scrollBarDisabled = true
		LayerWithBackgroundColorWidget container {
            ImageWidget image {
                    imageResource = "delete"
                    imageWidth = context.getHeightValue("260mm")
                    imageHeight = context.getHeightValue("100mm")
	        	}
		AlignWidget {
			VerticalBoxWidget vbox : 0.5, 0.5, false {
				margin = context.getHeightValue("5mm")
				spacing = context.getHeightValue("2000um")
				TextInputWidget id  {
					type = TextInputWidget.TYPE_INTEGER
					placeholder = "ID"
					backgroundColor = Color.white()
					fontSize = context.getHeightValue("2mm")
					padding = context.getHeightValue("2500um")
				}
            } 
        }
        }
    }
}
func initializeWidget override
{	
	base.initializeWidget()
	var deletebtn = ButtonWidget.forText(context, "Submit", func {
		APIClient.getInstance().getUser(func(response as DynamicMap){
			var data = assert response.getDynamicMap("data")
			var records = data.getDynamicVector("records")
			foreach record as DynamicMap in records.toVector(){
				if record.getString("id") ==id.getWidgetText(){
							var popup = new PopupDialogManager(context, this)
							popup.showConfirmDialog("Confirmation","Are you sure to delete Info?", func{
								APIClient.getInstance().deleteUser(id.getWidgetText(), func(res as DynamicMap){
									context.showMessageDialog("Notice", "Successfully deleted!")
									
								}, func(err as Error){
									context.showMessageDialog("Notice", "Failed! to Delete")
								})
							}, func{
								;
							})
				}
			}
        })
	})
	deletebtn.setWidgetFontSize(context.getHeightValue("2mm"))
	deletebtn.setWidgetBackgroundColor(Color.instance("#5d89e8"))
	vbox.addWidget(deletebtn)	

	

}
func onHomeClicked:
    NavigationWidget.switchToContainer(this, new adminPage(context))

func onADDClicked:
    NavigationWidget.switchToContainer(this, new addinstructor(context))

func onrecordClicked:
    NavigationWidget.switchToContainer(this, new records(context))

func onLogoutClicked:
    NavigationWidget.switchToContainer(this, new LoginPage(context))
func onUpdateClicked:
    NavigationWidget.switchToContainer(this, new updateinfo(context))

