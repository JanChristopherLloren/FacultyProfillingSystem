import jk.widget.common
import jk.widget.datagrid

class #widget:

ui VerticalBoxWidget
{
    	CanvasWidget {
		color = Color.instance("#5d89e8")
	}
    spacing = context.getHeightValue("2000um")
    margin = context.getHeightValue("5mm")
    HorizontalBoxWidget {
        spacing = context.getHeightValue("100um")
        TextButtonWidget btnHome : 1.0 {
            text = "HOME"
            padding = context.getHeightValue("1000um")
            backgroundColor = Color.instance("#264651")
            clickHandler = func {
                onHomeClicked()
            }
        }
		TextButtonWidget btnSchedule : 1.0 {
            text = "Profile"
            padding = context.getHeightValue("1000um")
            backgroundColor = Color.instance("#264651")
            clickHandler = func {
                onADDClicked()
            }
        }
		TextButtonWidget btnAboutUs : 1.0 {
            text = "RECORDS"
            padding = context.getHeightValue("1000um")
            backgroundColor = Color.instance("#264651")
            clickHandler = func {
                onrecordClicked()
            }
        }
		TextButtonWidget btnLogout : 1.0 {
            text = "LOGOUT"
            padding = context.getHeightValue("1000um")
            backgroundColor = Color.instance("#264651")
            clickHandler = func{
						var popup = new PopupDialogManager(context, this)
						popup.showConfirmDialog("Confirmation","Leave this Page?", func{
							onLogoutClicked()
						}, func{
							;
						})
			}
        }
    }
    VerticalScrollerWidget {
        scrollBarDisabled = false
		LayerWithBackgroundColorWidget container {
            color = Color.instance("#264651")
		AlignWidget {
			VerticalBoxWidget vbox : 0.5, 0.5, false {
				margin = context.getHeightValue("5mm")
				spacing = context.getHeightValue("2000um") 
		LabelWidget {
					text = "SCHEDULE"
					textColor = Color.black()
					fontSize = context.getHeightValue("8mm")
					textAlign = LabelWidget.ALIGN_CENTER
					fontBold = true
				}
            } 
        }
        DataGridWidget grid{
        cellPadding = 1
        }
    }
    }
}
func initializeWidget override
{
	base.initializeWidget()
	grid.addColumn("User Id", "id", 0.2)
	grid.addColumn("Name", "firstname", 1.0)
    grid.addColumn("lastName", "lastname", 1.0)
    grid.addColumn("Username", "username", 1.0)
    grid.addColumn("Password", "password", 1.0)
    grid.addColumn("Phonenumber", "phonenumber", 1.0)
    grid.addColumn("Gender", "gender", 1.0)
    grid.addColumn("Position", "position", 1.0)
    grid.addColumn("Subject Handle", "subject", 1.0)

	grid.addWidgetHeaderRow()
    APIClient.getInstance().getUser(func(response as DynamicMap) {
        var data = assert response.getDynamicMap("data")
        var records = data.getDynamicVector("records")
        if not records ||  records.getSize() < 1 {
             grid.addRow([ "NO data Record"])
        }
    	else {
			foreach record as DynamicMap in records.toVector(){
				grid.addRow([record.getString("id"),record.getString("firstname"),record.getString("lastname"),record.getString("username"),record.getString("password"),record.getString("phonenumber"),record.getString("gender"),record.getString("position"),record.getString("subject")])
			}        
     }
    })

}

func onHomeClicked:
    NavigationWidget.switchToContainer(this, new userDashboard(context))

func onADDClicked:
    NavigationWidget.switchToContainer(this, new userProfile(context))

func onrecordClicked:
    NavigationWidget.switchToContainer(this, new records(context))

func onLogoutClicked:
    NavigationWidget.switchToContainer(this, new LoginPage(context))




