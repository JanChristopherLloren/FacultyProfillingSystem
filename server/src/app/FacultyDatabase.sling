import jk.log
import jk.sqlite
import jk.mysql
import jk.sql
import jk.env
import jk.time

class:

model User
{
    id as string
    firstname as string
    lastname as string
    username as string
    password as string
    phonenumber as int
    gender as string
    position as string
    subject as string


}
model Admin
{
    idadmin as string
    firstname as string
    lastname as string
    username as string
    password as string
    phonenumber as int
    gender as string
    position as string
    field as string


}


const USER = "User"     //for user table
const ADMIN = "Admin"  // for register table

pvar db as MySQLDatabase

func forContext(ctx as LoggingContext) static as this
{
    var cstr = EnvironmentVariable.get("TASK_DATABASE")
    Log.debug(ctx, "Opening database connection: '" .. cstr .. "'")
    db = MySQLDatabase.forConnectionStringSync(ctx, cstr)
    if not db:
        Error.throw("failedToConnectToDatabase", cstr)
    var v = new this()
    v.setDb(db)
    return v
}

func updateTable(table as SQLTableInfo)
{
    if not table:
        Error.throw("nullTabel", "updateTable")
    if not db:
        Error.throw("nullTable", "updateTable")
    if not db.ensureTableExistsSync(table):
        Error.throw("failedToUpdateTable", table.getName())
}

func updateTables
{
    var user = SQLTableInfo.forName(USER)
    user.addIntegerKeyColumn("id")
    user.addStringColumn("firstname")
    user.addStringColumn("lastname")
    user.addStringColumn("username")
    user.addStringColumn("password")
    user.addIntegerColumn("phonenumber")
    user.addIntegerColumn("gender")
    user.addIntegerColumn("position")
    user.addIntegerColumn("subject")

    updateTable(user)


}
func updateTablesadmin
{
    var admin = SQLTableInfo.forName(ADMIN)
    admin.addIntegerKeyColumn("id")
    admin.addStringColumn("firstname")
    admin.addStringColumn("lastname")
    admin.addStringColumn("username")
    admin.addStringColumn("password")
    admin.addIntegerColumn("phonenumber")
    admin.addIntegerColumn("gender")
    admin.addIntegerColumn("position")
    admin.addIntegerColumn("field")

    updateTable(admin)


}
func addadmin(admin as Admin) as Admin
{
    assert admin
    assert db.executeSync(db.prepareInsertStatementSync(ADMIN, admin.toDynamicMap()))
    return admin
}

func addUser(user as User) as User
{
    assert user
    assert db.executeSync(db.prepareInsertStatementSync(USER, user.toDynamicMap()))
    return user
}


func updateAdmin(id as string, admin as Admin) as bool
{
    assert admin
    var criteria = new Admin()
    return db.executeSync(db.prepareUpdateStatementSync(ADMIN, criteria.toDynamicMap(), admin.toDynamicMap()))

}

func updateUser(id as string, user as User) as bool
{
    assert user
    var criteria = new User()
    return db.executeSync(db.prepareUpdateStatementSync(USER, criteria.toDynamicMap(), user.toDynamicMap()))

}

func deleteAdmin(id as string) as bool
{
    var criteria = new Admin()
    
    return db.executeSync(db.prepareDeleteStatementSync(ADMIN, criteria.toDynamicMap()))
}
func deleteUser(id as string) as bool
{
    var criteria = new User()
    return db.executeSync(db.prepareDeleteStatementSync(USER, criteria.toDynamicMap()))
}

func getAdmin as DynamicMap
{
    var v = new vector<Admin>
    var it = assert db.querySync(db.prepareQueryAllStatementSync(ADMIN)):
        return null
    while it {
        var o = it.next()
        if not o:
            break
        var admin = Admin.forJsonObject(o)
        if not admin:
            continue
        v += admin
    }
    var data = new DynamicMap()
    data.setObject("records", v)
    return data

}

func getUser as DynamicMap
{
    var v = new vector<User>
    var it = assert db.querySync(db.prepareQueryAllStatementSync(USER)):
        return null
    while it {
        var o = it.next()
        if not o:
            break
        var user = User.forJsonObject(o)
        if not user:
            continue
        v += user
    }
    var data = new DynamicMap()
    data.setObject("records", v)
    return data

}

func close
{
    if db:
        db.closeSync()
    db = null
}
