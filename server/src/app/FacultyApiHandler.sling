import jk.http.client
import jk.http.worker

class is HTTPRPCRouter #webapi2:

model InfoRequest
{
    firstname as string
    lastname as string
    contactnumber as string
    address as string
    username as string
    password as string
    firstnamedeceased as string
    lastnamedeceased as string
    currentdate as string
    burialdate as string
    servicetype as string
    serviceprice as string
    lotnumber as string
}

model LoginRequest
{
    fullname as string
    gender as string
    username as string
    password as string
}

var db as FacultyDatabase
var cors = FacultyConfig.getCorsUtil()

func getInfoDatabase as FacultyDatabase
{
    if not db {
        db = FacultyDatabase.forContext(getCtx())
        db.updateInfoTables()
    }
    return db
}

func getLoginDatabase as FacultyDatabase
{
    if not db {
        db = FacultyDatabase.forContext(getCtx())
        db.updateLoginTables()
    }
    return db
}

func postProcess(req as HTTPWorkerRequest, resp as HTTPWorkerResponse) override:
    cors.handleWorkerRequest(req, resp)

GET "/info"
{
    var info = assert getInfoDatabase().getInfo()
    sendOk info
}

POST "/info"
{
    var requestData = assert InfoRequest.forJsonString(req.getBodyString())
        sendError "invalidRequestInfo"
    var info = new FacultyDatabase.Info()
    info.setFirstname(requestData.getFirstname())
    info.setLastname(requestData.getLastname())
    info.setContactnumber(requestData.getContactnumber())
    info.setAddress(requestData.getAddress())
    info.setUsername(requestData.getUsername())
    info.setPassword(requestData.getPassword())
    info.setFirstnamedeceased(requestData.getFirstnamedeceased())
    info.setLastnamedeceased(requestData.getLastnamedeceased())
    info.setCurrentdate(requestData.getCurrentdate())
    info.setBurialdate(requestData.getBurialdate())
    info.setServicetype(requestData.getServicetype())
    info.setServiceprice(requestData.getServiceprice())
    info.setLotnumber(requestData.getLotnumber())
    assert getInfoDatabase().addInfo(info):
        sendError "failedToSaveInfo"
    sendOk
}

PUT "/info/:id"
{
    var requestData = assert InfoRequest.forJsonString(req.getBodyString()):
        sendError "invalidRequest"
    var info = new FacultyDatabase.Info()
    info.setFirstname(requestData.getFirstname())
    info.setLastname(requestData.getLastname())
    info.setContactnumber(requestData.getContactnumber())
    info.setAddress(requestData.getAddress())
    info.setUsername(requestData.getUsername())
    info.setPassword(requestData.getPassword())
    info.setFirstnamedeceased(requestData.getFirstnamedeceased())
    info.setLastnamedeceased(requestData.getLastnamedeceased())
    info.setCurrentdate(requestData.getCurrentdate())
    info.setBurialdate(requestData.getBurialdate())
    info.setServicetype(requestData.getServicetype())
    info.setServiceprice(requestData.getServiceprice())
    info.setLotnumber(requestData.getLotnumber())
    assert getInfoDatabase().updateInfo(vars.getString("id"),info):
        sendError "FailedUpdateinfo"
        sendOk
}

DELETE "/info/:id"
{
    assert getInfoDatabase().deleteInfo(vars.getString("id")):
        sendError "failedToDeleteinfo"
    sendOk
}

GET "/login"
{
    var login = assert getLoginDatabase().getLogin()
    sendOk login
}

POST "/login"
{
    var requestData = assert LoginRequest.forJsonString(req.getBodyString()):
        sendError "invalidRequestlogin"
    var login = new FacultyDatabase.Login()
    login.setFullname(requestData.getFullname())
    login.setGender(requestData.getGender())
    login.setUsername(requestData.getUsername())
    login.setPassword(requestData.getPassword())
    assert getLoginDatabase().addlogin(login):
        sendError "failedToAddlogin"
    sendOk
}

PUT "/login/:id"
{
    var requestData = assert LoginRequest.forJsonString(req.getBodyString()):
        sendError "invalidRequestLogin"
    var login = new FacultyDatabase.Login()
    login.setFullname(requestData.getFullname())
    login.setGender(requestData.getGender())
    login.setUsername(requestData.getUsername())
    login.setPassword(requestData.getPassword())
    assert getLoginDatabase().updateLogin(vars.getString("id"),login):
        sendError "failedToAddLogin"
    sendOk
}

DELETE "/login/:id"
{
    assert getLoginDatabase().deleteLogin(vars.getString("id")):
        sendError "failedToDeletelogin"
    sendOk
}

