import jk.http.client
import jk.http.worker

class is HTTPRPCRouter #webapi2:

model UserRequest
{
    id as int
    firstname as string
    lastname as string
    username as string
    password as string
    phonenumber as int
    gender as string
    position as string
    subject as string

}
model AdminRequest
{
    id as int
    firstname as string
    lastname as string
    username as string
    password as string
    phonenumber as int
    gender as string
    position as string
    field as string

}

var db as FacultyDatabase
var cors = FacultyConfig.getCorsUtil()

func getDatabase as FacultyDatabase
{
    if not db {
        db = FacultyDatabase.forContext(getCtx())
        db.updateTables()
        db.updateTablesadmin()
    }

    return db
}

func postProcess(req as HTTPWorkerRequest, resp as HTTPWorkerResponse) override:
cors.handleWorkerRequest(req, resp)

GET "/user"
{
    var user = assert getDatabase().getUser()
    sendOk user
}
GET "/admin"
{
    var ads = assert getDatabase().getAdmin()
    sendOk ads
}

POST "/admin"
{
    var requestData = assert AdminRequest.forJsonString(req.getBodyString()):
    sendError "invalidRequest"
    var admin = new FacultyDatabase.Admin()
    admin.setFirstname(requestData.getFirstname())
    admin.setLastname(requestData.getLastname())
    admin.setUsername(requestData.getUsername())
    admin.setPassword(requestData.getPassword())
    admin.setPhonenumber(requestData.getPhonenumber())
    admin.setGender(requestData.getGender())
    admin.setPosition(requestData.getPosition())
    admin.setField(requestData.getField())
 
    assert getDatabase().addadmin(admin):
    sendError "failedToSaveAdmin"
    sendOk
}
POST "/user"
{
    var requestData = assert UserRequest.forJsonString(req.getBodyString()):
    sendError "invalidRequest"
    var user = new FacultyDatabase.User()
    user.setFirstname(requestData.getFirstname())
    user.setLastname(requestData.getLastname())
    user.setUsername(requestData.getUsername())
    user.setPassword(requestData.getPassword())
    user.setPhonenumber(requestData.getPhonenumber())
    user.setGender(requestData.getGender())
    user.setPosition(requestData.getPosition())
    user.setSubject(requestData.getSubject())
 
    assert getDatabase().addUser(user):
    sendError "failedToSaveUser"
    sendOk
}

 PUT "/user"
{
    var requestData = assert UserRequest.forJsonString(req.getBodyString()):
        sendError "invalidRequest"
    var user = new FacultyDatabase.User()
    user.setUsername(requestData.getUsername())
    user.setPassword(requestData.getPassword())
    assert getDatabase().updateUser(vars.getString("id"), user):
        sendError "failedToUpdateUser"
    sendOk
}
 PUT "/admin"
{
    var requestData = assert AdminRequest.forJsonString(req.getBodyString()):
        sendError "invalidRequest"
    var ads = new FacultyDatabase.Admin()
    ads.setUsername(requestData.getUsername())
    ads.setPassword(requestData.getPassword())
    assert getDatabase().updateAdmin(vars.getString("id"), ads):
        sendError "failedToUpdateAdmin"
    sendOk
}
DELETE "/admin"
{
    assert getDatabase().deleteAdmin(vars.getString("id")):
        sendError "failedToDeleteAdmin"
    sendOk
}


DELETE "/user"
{
    assert getDatabase().deleteUser(vars.getString("id")):
        sendError "failedToDeleteUser"
    sendOk
}
